ModuleName = 'Box2D'

Header = <<EOD
#include "Box2D.h"
EOD

Enums = [
      'b2BodyType',
]

Constants = [
          ['int', 'b2_staticBody'],
          ['int', 'b2_kinematicBody'],
          ['int', 'b2_dynamicBody'],
]

Functions = [
          ['b2Vec2', 'b2Vec2', ['float', 'float']],
]

Classes = {
  'b2Vec2' => {
    :parent => nil,
    :memory_management => :default,
    :methods => [
                 [CONSTRUCTOR, []],
                 [CONSTRUCTOR, ['float', 'float']],
                 [ATTR_ACCESSOR, 'float', 'x'],
                 [ATTR_ACCESSOR, 'float', 'y'],
                 [0, 'void', 'Set', ['float', 'float']],
                ],
  },
  'b2Shape' => {
    :parent => nil,
    :memory_management => :default,
    :methods => [
                ],
  },
  'b2EdgeShape' => {
    :parent => 'b2Shape',
    :memory_management => :default,
    :methods => [
                 [CONSTRUCTOR, []],
                 [0, 'void', 'Set', ['const b2Vec2&', 'const b2Vec2&']],
                ],
  },
  'b2PolygonShape' => {
    :parent => 'b2Shape',
    :memory_management => :default,
    :methods => [
                 [CONSTRUCTOR, []],
                 [0, 'void', 'SetAsBox', ['float', 'float']],
                ],
  },
  'b2FixtureDef' => {
    :parent => nil,
    :memory_management => :default,
    :methods => [
                 [CONSTRUCTOR, []],
                 [ATTR_ACCESSOR, 'const b2Shape*', 'shape'],
                 [ATTR_ACCESSOR, 'float', 'friction'],
                 [ATTR_ACCESSOR, 'float', 'restitution'],
                 [ATTR_ACCESSOR, 'float', 'density'],
                ],
  },
  'b2Fixture' => {
    :parent => nil,
    :memory_management => :none, # b2Body::CreateFixture,DestroyFixture
    :methods => [
                ],
  },
  'b2BodyDef' => {
    :parent => nil,
    :memory_management => :default,
    :methods => [
                 [CONSTRUCTOR, []],
                 [ATTR_ACCESSOR, 'b2BodyType', 'type'],
                 [ATTR_ACCESSOR, 'b2Vec2', 'position'],
                 [ATTR_ACCESSOR, 'float', 'angle'],
                 [ATTR_ACCESSOR, 'b2Vec2', 'linearVelocity'],
                 [ATTR_ACCESSOR, 'float', 'angularVelocity'],
                 [ATTR_ACCESSOR, 'float', 'linearDamping'],
                 [ATTR_ACCESSOR, 'float', 'angularDamping'],
                ],
  },
  'b2Body' => {
    :parent => nil,
    :memory_management => :none, # b2World::CreateBody,DestroyBody
    :methods => [
                 [0, 'b2Fixture*', 'CreateFixture', ['const b2FixtureDef*']],
                 [0, 'b2Fixture*', 'CreateFixture', ['const b2Shape*', 'float']],
                 [0, 'void', 'DestroyFixture', ['b2Fixture*']],
                 [0, 'b2Body*', 'GetNext', []],
                 [0, 'void*', 'GetUserData', []],
                 [0, 'void', 'SetTransform', ['const b2Vec2&', 'float']],
                #[0, 'const b2Transform&', 'GetTransform', []],
                 [0, 'const b2Vec2&', 'GetPosition', []],
                 [0, 'float', 'GetAngle', []],
                 [0, 'void', 'SetLinearVelocity', ['const b2Vec2&']],
                 [0, 'b2Vec2', 'GetLinearVelocity', []],
                 [0, 'void', 'SetAngularVelocity', ['float']],
                 [0, 'float', 'GetAngularVelocity', []],
                ],
  },
  'b2World' => {
    :parent => nil,
    :memory_management => :default,
    :methods => [
                 [CONSTRUCTOR, ['b2Vec2']],
                 [0, 'void', 'SetAllowSleeping', ['bool']],
                 [0, 'void', 'SetContinuousPhysics', ['bool']],
                 [0, 'b2Body*', 'CreateBody', ['const b2BodyDef*']],
                 [0, 'void', 'DestroyBody', ['b2Body*']],
                 [0, 'void', 'Step', ['float', 'int', 'int']],
                 [0, 'b2Body*', 'GetBodyList', []],
                ],
  },
}
