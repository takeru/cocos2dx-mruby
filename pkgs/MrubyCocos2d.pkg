ModuleName = 'Cocos2d'

Header = <<EOD
#include <string>
#include "cocos2d.h"
#include "SimpleAudioEngine.h"
#include "mruby/mruby.h"

extern int registerProc(mrb_state *mrb, mrb_value self, mrb_value proc);

using namespace cocos2d;

typedef ccColor3B CcColor3B;

template <class T>
mrb_value wrap(mrb_state *mrb, T* ptr, const char* type);
mrb_value wrap_Cocos2d_CCTouch(mrb_state *mrb, CCTouch* ptr) {
  return wrap(mrb, ptr, "CCTouch");
}
mrb_value wrap_Cocos2d_CCObject(mrb_state *mrb, CCObject* ptr) {
  return wrap(mrb, ptr, "CCObject");
}

EOD

Constants = [
  ['int', 'CCTOUCHBEGAN'],
  ['int', 'CCTOUCHMOVED'],
  ['int', 'CCTOUCHENDED'],
  ['int', 'CCTOUCHCANCELLED'],

  ['int', 'kCCNodeOnEnter'],
  ['int', 'kCCNodeOnExit'],
  ['int', 'kCCNodeOnEnterTransitionDidFinish'],
  ['int', 'kCCNodeOnExitTransitionDidStart'],
  ['int', 'kCCNodeOnCleanup'],

  # ccTouchesMode
  ['int', 'kCCTouchesAllAtOnce'],
  ['int', 'kCCTouchesOneByOne'],
]
Enums = [
  "ccTouchesMode"
]

Functions = [
  ['CCPoint', 'CCPointMake', ['float', 'float']],
  ['CCPoint', 'ccp', ['float', 'float']],
  ['CCSize', 'CCSizeMake', ['float', 'float']],
  ['CCRect', 'CCRectMake', ['float', 'float', 'float', 'float']],
  ['CcColor3B', 'ccc3', ['unsigned char', 'unsigned char', 'unsigned char']],
  ['float', 'CCRANDOM_0_1', []],
]

Classes = {
  'CcColor3B' => {
    :methods => [
                 [ATTR_ACCESSOR, 'unsigned char', 'r'],
                 [ATTR_ACCESSOR, 'unsigned char', 'g'],
                 [ATTR_ACCESSOR, 'unsigned char', 'b'],
                ],
  },
  'CCPoint' => {
    :methods => [
                 [CONSTRUCTOR, []],
                 [CONSTRUCTOR, ['float', 'float']],
                 [CONSTRUCTOR, ['const CCPoint&']],
                 [CONSTRUCTOR, ['const CCSize&']],
                 [ATTR_ACCESSOR, 'float', 'x'],
                 [ATTR_ACCESSOR, 'float', 'y'],
                ],
  },
  'CCSize' => {
    :methods => [
                 [CONSTRUCTOR, []],
                 [CONSTRUCTOR, ['float', 'float']],
                 [CONSTRUCTOR, ['const CCPoint&']],
                 [CONSTRUCTOR, ['const CCSize&']],
                 [ATTR_ACCESSOR, 'float', 'width'],
                 [ATTR_ACCESSOR, 'float', 'height'],
                ],
  },
  'CCRect' => {
    :methods => [
                 [CONSTRUCTOR, []],
                 [CONSTRUCTOR, ['float', 'float', 'float', 'float']],
                 [CONSTRUCTOR, ['const CCRect&']],
                 [ATTR_ACCESSOR, 'CCPoint&', 'origin'],
                 [ATTR_ACCESSOR, 'CCSize&', 'size'],
                 [0, 'bool', 'containsPoint', ['const CCPoint&']],
                ],
  },
  'CCObject' => {
    :methods => [
                 [0, 'void', 'release', []],
                 [0, 'CCObject*', 'autorelease', []],
                 [0, 'unsigned int', 'retainCount', []],
                 [ATTR_ACCESSOR, 'int', 'm_nLuaID'],
                 [CUSTOM, 'int', 'dataptr', [], :code=>"  return mrb_fixnum_value((int)DATA_PTR(self));"]
                ],
  },
  'CCArray' => {
    :methods => [
                 [STATIC, 'CCArray*', 'create', []],
                 [0, 'void', 'addObject', ['CCObject*']],
                ],
  },
  'CCAction' => {
    :parent => 'CCObject',
    :methods => [
                  # TODO
                ],
  },
  'CCFiniteTimeAction' => {
    :parent => 'CCAction',
    :methods => [
                  # TODO
                ],
  },
  'CCActionInterval' => {
    :parent => 'CCFiniteTimeAction',
    :methods => [
                  # TODO
                ],
  },
  'CCActionInstant' => {
    :parent => 'CCFiniteTimeAction',
    :methods => [
                  # TODO
                ],
  },
  'CCNode' => {
    :parent => 'CCObject',
    :methods => [
                 [0, 'void', 'setPosition', ['const CCPoint&']],
                 [0, 'void', 'setPosition', ['float', 'float']],
                 [0, 'void', 'setPositionX', ['float']],
                 [0, 'float', 'getPositionX', []],
                 [0, 'void', 'setPositionY', ['float']],
                 [0, 'float', 'getPositionY', []],
                 [0, 'const CCPoint&', 'getPosition', []],
                 [0, 'void', 'addChild', ['CCNode*']],
                 [0, 'void', 'addChild', ['CCNode*', 'int']],
                 [0, 'void', 'addChild', ['CCNode*', 'int', 'int']],
                 [0, 'CCNode*', 'getChildByTag', ['int']],
                 [0, 'void', 'runAction', ['CCAction*']],
                 [0, 'const CCSize&', 'getContentSize', []],
                 [0, 'void', 'setVisible', ['bool']],
                 [0, 'void', 'scheduleUpdate', []],
                 [0, 'void', 'scheduleUpdateWithPriorityLua', ['block', 'int']],
                 [0, 'CCRect', 'boundingBox', []],
                 [0, 'CCPoint', 'convertTouchToNodeSpace', ['CCTouch*']],
                 [0, 'int', 'getTag', []],
                 [0, 'void', 'setTag', ['int']],
                 [0, 'void', 'removeFromParentAndCleanup', ['bool']],
                ],
  },
  'CCNodeRGBA' => {
    :parent => 'CCNode',
    :methods => [
                 [0, 'void', 'setColor', ['const CcColor3B&']],
                ],
  },
  'CCTexture2D' => {
    :methods => [
                ],
  },
  'CCTextureCache' => {
    :methods => [
                 [STATIC, 'CCTextureCache*', 'sharedTextureCache', []],
                 [0, 'CCTexture2D*', 'addImage', ['const char*']],
                ],
  },
  'CCSpriteFrame' => {
    :parent => 'CCObject',
    :methods => [
                 [STATIC, 'CCSpriteFrame*', 'create', ['const char*', 'const CCRect&']],
                 [STATIC, 'CCSpriteFrame*', 'createWithTexture', ['CCTexture2D*', 'const CCRect&']],
                ],
  },
  'CCAnimation' => {
    :parent => 'CCObject',
    :methods => [
                 [STATIC, 'CCAnimation*', 'createWithSpriteFrames', ['CCArray*', 'float']],
                ],
  },
  'CCAnimate' => {
    :parent => 'CCActionInterval',
    :methods => [
                 [STATIC, 'CCAnimate*', 'create', ['CCAnimation*']],
                ],
  },
  'CCRepeatForever' => {
    :parent => 'CCActionInterval',
    :methods => [
                 [STATIC, 'CCRepeatForever*', 'create', ['CCActionInterval*']],
                ],
  },
  'CCScaleTo' => {
    :parent => 'CCActionInterval',
    :methods => [
                 [STATIC, 'CCScaleTo*', 'create', ['float', 'float']],
                ],
  },
  'CCMoveBy' => {
    :parent => 'CCActionInterval',
    :methods => [
                 [STATIC, 'CCMoveBy*', 'create', ['float', 'const CCPoint&']],
                ],
  },
  'CCMoveTo' => {
    :parent => 'CCMoveBy',
    :methods => [
                 [STATIC, 'CCMoveTo*', 'create', ['float', 'const CCPoint&']],
                ],
  },
  'CCCallFunc' => {
    :parent => 'CCActionInstant',
    :methods => [
                 [STATIC, 'CCCallFunc*', 'create', ['block']],
                ],
  },
  'CCSequence' => {
    :parent => 'CCActionInterval',
    :methods => [
                 [STATIC, 'CCActionInterval*', 'createWithTwoActions', ['CCFiniteTimeAction*', 'CCFiniteTimeAction*']],
                ],
  },
  'CCSpawn' => {
    :parent => 'CCActionInterval',
    :methods => [
                 [STATIC, 'CCActionInterval*', 'createWithTwoActions', ['CCFiniteTimeAction*', 'CCFiniteTimeAction*']],
                ],
  },
  'CCSprite' => {
    :parent => 'CCNodeRGBA',
    :methods => [
                 [STATIC, 'CCSprite*', 'create', []],
                 [STATIC, 'CCSprite*', 'create', ['const char*']],
                 [STATIC, 'CCSprite*', 'create', ['const char*', 'const CCRect&']],
                 [STATIC, 'CCSprite*', 'createWithSpriteFrame', ['CCSpriteFrame*']],
                 [CONSTRUCTOR, []],
                 [0, 'void', 'initWithTexture', ['CCTexture2D*']],
                 [0, 'void', 'initWithTexture', ['CCTexture2D*', 'const CCRect&']],
                ],
  },
  'CCSpriteBatchNode' => {
    :parent => 'CCNode',
    :methods => [
                 [CONSTRUCTOR, []],
                 [STATIC, 'CCSpriteBatchNode*', 'create', ['const char*', 'unsigned int']],
                 [STATIC, 'CCSpriteBatchNode*', 'create', ['const char*']],
                 [0, 'CCTexture2D*', 'getTexture', []],
                ],
  },
  'CCLabelTTF' => {
    :parent => 'CCSprite',
    :methods => [
                 [STATIC, 'CCLabelTTF*', 'create', ['const char*', 'const char*', 'float']],
                ],
  },
  'CCLayer' => {
    :parent => 'CCNode',
    :methods => [
                 [CONSTRUCTOR, []],
                 [STATIC, 'CCLayer*', 'create', []],
                 [0, 'void', 'registerScriptTouchHandler', ['block']],
                 [0, 'void', 'registerScriptTouchHandler', ['block', 'bool']],
                 [0, 'void', 'registerScriptTouchHandler', ['block', 'bool', 'int']],
                 [0, 'void', 'registerScriptTouchHandler', ['block', 'bool', 'int', 'bool']],
                 [0, 'void', 'setTouchEnabled', ['bool']],
                 [0, 'void', 'setAccelerometerEnabled', ['bool']],
                 [0, 'void', 'setTouchMode', ['ccTouchesMode']],
                ],
  },
  'CCLayerRGBA' => {
    :parent => 'CCLayer',
    :methods => [
                ],
  },
  'CCScene' => {
    :parent => 'CCNode',
    :methods => [
                 [STATIC, 'CCScene*', 'create', []],
                ],
  },
  'CCScheduler' => {
    :methods => [
                 [0, 'int', 'scheduleScriptFunc', ['block', 'float', 'bool']],
                ],
  },
  'CCDirector' => {
    :methods => [
                 [STATIC, 'CCDirector*', 'sharedDirector', []],
                 [0, 'CCSize', 'getWinSize', []],
                 [0, 'CCPoint', 'getVisibleOrigin', []],
                 [0, 'CCSize', 'getVisibleSize', []],
                 [0, 'CCPoint', 'convertToGL', ['const CCPoint&']],
                 [0, 'void', 'runWithScene', ['CCScene*']],
                 [0, 'CCScheduler*', 'getScheduler', []],
                 [0, 'void', 'setContentScaleFactor', ['float']]
                ],
  },
  'CCFileUtils' => {
    :methods => [
                 [STATIC, 'CCFileUtils*', 'sharedFileUtils', []],
                 [0, 'std::string', 'fullPathForFilename', ['const char*']],
                ],
  },

  'CCMenuItem' => {
    :parent => 'CCNodeRGBA',
    :methods => [
                 [0, 'void', 'registerScriptTapHandler', ['block']],
                ],
  },
  'CCMenuItemSprite' => {
    :parent => 'CCMenuItem',
    :methods => [
                ],
  },
  'CCMenuItemImage' => {
    :parent => 'CCMenuItemSprite',
    :methods => [
                 [STATIC, 'CCMenuItemImage*', 'create', ['const char*', 'const char*']],
                ],
  },
  'CCMenu' => {
    :parent => 'CCLayerRGBA',
    :methods => [
                 [STATIC, 'CCMenu*', 'createWithItem', ['CCMenuItem*']],
                ],
  },
  'CCTouch' => {
    :parent => 'CCObject',
    :methods => [
                 [0, 'CCPoint', 'getLocation', []],
                 [0, 'CCPoint', 'getPreviousLocation', []],
                 [0, 'CCPoint', 'getStartLocation', []],
                 [0, 'CCPoint', 'getDelta', []],
                 [0, 'CCPoint', 'getLocationInView', []],
                 [0, 'CCPoint', 'getPreviousLocationInView', []],
                 [0, 'CCPoint', 'getStartLocationInView', []],
                 [0, 'int', 'getID', []]
                ],
  },
}
